# AUTOGENERATED! DO NOT EDIT! File to edit: 02_fetch_emoji.ipynb (unless otherwise specified).

__all__ = ['write_fetch_result', 'fetch_emoji', 'list_out_existing_filenames_of_plurks']

# Cell
from acc import *
from plurk_oauth import PlurkAPI

acc_info

# Cell
"let's make write file a function"
def write_fetch_result(filename,content, dirname="tmp_smile_first/"):
    from pathlib import Path
    "save the file"
    "check if the folder exist first"
    if not os.path.isdir(Path(dirname)):
        os.system("mkdir %s" % dirname)
    else:
        print("folder exists")
    "write content into the file"
    if not os.path.isfile(Path(dirname+filename)):
        with open(Path(dirname+filename), "w") as f:
            cnt = 0
            for ele in content:
                f.write("\n\nfile #%d\n"%(cnt))
                f.write(ele)
                cnt += 1
            f.close()
    else:
        print("is file, skipped")

# Cell
"first, make fetch emoji a function as well"
def fetch_emoji(emoji='',plurk=None):
    if len(emoji) == 0:
        print("emoji not inputed, exit")
        return
    if plurk is None:
        print("initialize plurk ...")
        from acc import acc_info
        from plurk_oauth import PlurkAPI
        # with access token, just run this
        plurk = PlurkAPI(acc_info["CONSUMER_KEY"], acc_info["CONSUMER_SECRET"])
        plurk.authorize(acc_info["API_KEY"], acc_info["API_SECRET"])
    tmp_p = plurk.callAPI('/APP/PlurkSearch/search', options={'query' : emoji,'offset':100})
    # weird edge case exists
    if tmp_p is None:
        return []
    # should we check if key exists?
    return [ele['content_raw'] for ele in tmp_p['plurks'] if ele is not None]

# Cell
"prevent accidently overwrite the existing files"
def list_out_existing_filenames_of_plurks():
    import os
    source = list(os.walk("tmp_smile_first"))[0][2]
    for ele in source:
        print(ele)

list_out_existing_filenames_of_plurks()